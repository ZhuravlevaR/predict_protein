# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------
import json
import logging
import os
import pickle
import numpy as np
import pandas as pd
import joblib

import azureml.automl.core
from azureml.automl.core.shared import logging_utilities, log_server
from azureml.telemetry import INSTRUMENTATION_KEY

from inference_schema.schema_decorators import input_schema, output_schema
from inference_schema.parameter_types.numpy_parameter_type import NumpyParameterType
from inference_schema.parameter_types.pandas_parameter_type import PandasParameterType


input_sample = pd.DataFrame({"\u0426\u0435\u043d\u044b \u043d\u0430 \u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0432 \u042e\u0412\u0410 / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0432 \u041a\u0438\u0442\u0430\u0435 / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u043a\u043e\u043a\u0441\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u0443\u0433\u043e\u043b\u044c / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u0436\u0435\u043b\u0435\u0437\u043d\u0443\u044e \u0440\u0443\u0434\u0443 / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0424\u044c\u044e\u0447\u0435\u0440\u0441\u044b \u043d\u0430 \u0430\u0440\u043c\u0430\u0442\u0443\u0440\u0443 \u0432 \u041a\u0438\u0442\u0430\u0435, 3 \u043c\u0435\u0441 \u0432\u043f\u0435\u0440\u0435\u0434 / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0424\u044c\u044e\u0447\u0435\u0440\u0441\u044b \u043d\u0430 \u0430\u0440\u043c\u0430\u0442\u0443\u0440\u0443 \u0432 \u041a\u0438\u0442\u0430\u0435, 1 \u043c\u0435\u0441 \u0432\u043f\u0435\u0440\u0435\u0434 / \u0434\u043d\u0435\u0432\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0447\u0435\u0439 \u0432 \u041a\u0438\u0442\u0430\u0435": pd.Series([0.0], dtype="float64"), "\u0417\u0430\u043f\u0430\u0441\u044b \u0441\u043e\u0440\u0442\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u043a\u0430\u0442\u0430 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0430\u0445 \u0432 \u041a\u0438\u0442\u0430\u0435": pd.Series([0.0], dtype="float64"), "\u0417\u0430\u043f\u0430\u0441\u044b \u0430\u0440\u043c\u0430\u0442\u0443\u0440\u044b \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0430\u0445 \u0432 \u041a\u0438\u0442\u0430\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0432 \u042e\u0412\u0410 / \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u043a\u043e\u043a\u0441\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u0443\u0433\u043e\u043b\u044c / \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u0436\u0435\u043b\u0435\u0437\u043d\u0443\u044e \u0440\u0443\u0434\u0443 / \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u0447\u0443\u0433\u0443\u043d / \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u0426\u0435\u043d\u044b \u043d\u0430 \u043b\u043e\u043c / \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435": pd.Series([0.0], dtype="float64"), "\u041a\u0443\u0440\u0441 \u0432\u0430\u043b\u044e\u0442 \u0424\u0438\u043b\u0438\u043f\u043f\u0438\u043d\u044b": pd.Series([0.0], dtype="float64"), "\u041a\u0443\u0440\u0441 \u0432\u0430\u043b\u044e\u0442 \u0422\u0430\u0439\u0432\u0430\u043d\u044c": pd.Series([0.0], dtype="float64"), "\u0411\u0438\u0440\u0436\u0435\u0432\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0422\u0430\u0439\u0432\u0430\u043d\u044c": pd.Series([0.0], dtype="float64"), "\u0411\u0438\u0440\u0436\u0435\u0432\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0422\u0430\u0439\u0432\u0430\u043d\u044c 2": pd.Series([0.0], dtype="float64"), "\u041a\u0443\u0440\u0441 \u0432\u0430\u043b\u044e\u0442 \u0422\u0430\u0438\u043b\u0430\u043d\u0434": pd.Series([0.0], dtype="float64"), "\u041a\u0443\u0440\u0441 \u0432\u0430\u043b\u044e\u0442 \u042f\u043f\u043e\u043d\u0438\u044f": pd.Series([0.0], dtype="float64"), "\u0411\u0438\u0440\u0436\u0435\u0432\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u042f\u043f\u043e\u043d\u0438\u044f": pd.Series([0.0], dtype="float64"), "\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u043b\u0438 \u0432 \u041a\u0438\u0442\u0430\u0435 / \u0434\u0435\u043a\u0430\u0434\u0430": pd.Series([0.0], dtype="float64"), "\u042d\u043a\u0441\u043f\u043e\u0440\u0442 \u0441\u0442\u0430\u043b\u0438 \u0438\u0437 \u041a\u0438\u0442\u0430\u044f": pd.Series([0.0], dtype="float64"), "\u0418\u043c\u043f\u043e\u0440\u0442 \u0437\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0432 \u041a\u0438\u0442\u0430\u0439": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0432 \u041a\u0438\u0442\u0430\u0435": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0432 \u041a\u0438\u0442\u0430\u0435\u0431 \u043c/\u043c": pd.Series([0.0], dtype="float64"), "\u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u043c\u043e\u0432 \u0432 \u041a\u0438\u0442\u0430\u0435": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u0438\u043d\u044b, \u043c/\u043c": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0422\u0430\u0439\u0432\u0430\u043d\u044c, \u043c/\u043c": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0422\u0430\u0438\u043b\u0430\u043d\u0434, \u043c/\u043c": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0437\u043d\u0435\u0441\u0430 \u0422\u0430\u0438\u043b\u0430\u043d\u0434": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u042f\u043f\u043e\u043d\u0438\u044f, \u043c/\u043c": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u041f\u041c\u0418 \u042f\u043f\u043e\u043d\u0438\u044f": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0437\u043d\u0435\u0441\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u0438\u043d\u044b / \u043a\u0432\u0430\u0440\u0442\u0430\u043b": pd.Series([0.0], dtype="float64"), "\u0418\u043d\u0434\u0435\u043a\u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0437\u043d\u0435\u0441\u0430 \u042f\u043f\u043e\u043d\u0438\u044f / \u043a\u0432\u0430\u0440\u0442\u0430\u043b": pd.Series([0.0], dtype="float64")})
output_sample = np.array([0])
try:
    log_server.enable_telemetry(INSTRUMENTATION_KEY)
    log_server.set_verbosity('INFO')
    logger = logging.getLogger('azureml.automl.core.scoring_script')
except:
    pass


def init():
    global model
    # This name is model.id of model that we want to deploy deserialize the model file back
    # into a sklearn model
    model_path = r".\model\regr_automl_week.pkl"#os.path.join(os.getenv('AZUREML_MODEL_DIR'), 'model.pkl')
    path = os.path.normpath(model_path)
    #path_split = path.split(os.sep)
    #log_server.update_custom_dimensions({'model_name': path_split[-3], 'model_version': path_split[-2]})
    try:
        logger.info("Loading model from path.")
        model = joblib.load(model_path)
        logger.info("Loading successful.")
    except Exception as e:
        logging_utilities.log_traceback(e, logger)
        raise


@input_schema('data', PandasParameterType(input_sample))
@output_schema(NumpyParameterType(output_sample))
def run(data):
    try:
        result = model.predict(data)
        return json.dumps({"result": result.tolist()})
    except Exception as e:
        result = str(e)
        return json.dumps({"error": result})
